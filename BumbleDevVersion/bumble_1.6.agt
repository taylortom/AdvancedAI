% Bumble version 1.0: a sample agent file for the Virtual World system
%
% Author: Donald Nute
%
% Date created:  02/02/1998
% Last modified: 12/06/2005
%

:- dynamic [agent/2,tried/0,last/1,pushed/0,hungry_status/1,hurt_status/1,mymap/3,visited/2,here/2,last_seen/3,path/2,exploration/0,search_type/1,mygoal/1].

% agent(+Perceptions, -Action) receives set of Perceptions from the
% V-World simulator and returns an Action. Perceptions is a list of 
% the form
%
% [Strength,Damage,Inventory,Last,
%	[NWNW, NNW , NN  , NNE , NENE],
%	[WNW , NW  , N   , NE  , ENE ]
%	[WW  , W   , HERE, E   , EE  ],
%	[WSW , SW  , S   , SE  , ESE ],
%	[SWSW, SSW , SS  , SSE , SESE]]
% 
% where the last five items in the list lists comprising the contents
% of the 5 x 5 grid centered on the agent's current location (HERE).
% Inventory is also a list of the items the agent is currently holding.
% Last points in the direction of the location the agent last occupied.
% For example, if the agent tried successfully to move north at its
% last turn, then Last = s; but if the agent tried to move north and
% its movement was blocked, then Last = same.
%
% An agent cannot see through an opaque object. If its view of a cell
% is hidden by an object, the corresponding variable in its visual field
% has the value cant_see.

agent(Perceptions,Action) :-
	set_bumble_states(Perceptions),
	build_bumble_map(Perceptions),
	bumble(Perceptions,Action).

set_bumble_states([Strength,Damage|_]) :-
	is_bumble_hungry(Strength),
	is_bumble_hurt(Damage),
	assert(exploration),
	set_exploration.

is_bumble_hungry(Strength) :-
	Strength < 500,
	retractall(hungry_status(_)),
	nl, write('Starving!'),
	assert(hungry_status(starving)).

is_bumble_hungry(Strength) :-
	Strength < 1000,
	retractall(hungry_status(_)),
	nl, write('Very hungry'),
	assert(hungry_status(very_hungry)).

is_bumble_hungry(Strength) :-
	Strength < 1500,
	nl, write('Medium hungry'),
	retractall(hungry_status(_)),
	assert(hungry_status(medium_hungry)).

is_bumble_hungry(Strength) :-
  	Strength = 4000,
	nl, write('Not hungry'),
	retractall(hungry_status(_)),
	assert(hungry_status(not_hungry)).

%don't change the hunrgy
is_bumble_hungry(Strength). 


%bumble is critially hurt
is_bumble_hurt(Damage) :-
	Damage > 75,
	nl, write('Critically hurt!'),
	retractall(hurt_status(_)),
	assert(hurt_status(critically_hurt)).

%bumble is medium hurt
is_bumble_hurt(Damage) :-
	Damage > 40,
	nl, write('Medium hurt'),
	retractall(hurt_status(_)),
	assert(hurt_status(medium_hurt)).

%bumble is not very hurt
is_bumble_hurt(Damage) :-
	Damage > 25,
	nl, write('Small hurt'),
	retractall(hurt_status(_)),
	assert(hurt_status(small_hurt)).

%bumble is not hurt
is_bumble_hurt(Damage) :-
	Damage = 0,
	nl, write('Not hurt'),
	retractall(hurt_status(_)),
	assert(hurt_status(not_hurt)).

%Leave bumble
is_bumble_hurt(Damage).

set_exploration:-
	retract(exploration),
	hurt_status(not_hurt),
	hungry_status(not_hungry),
	assert(exploration).

set_exploration.


% Bumble generally goes through doors when he sees them, eats whatever
% he sees that can be eaten, picks up anything he can, pushes on everything
% he sees except walls and animate objects, runs away from animate objects,
% and otherwise tends to move in straight lines with random changes of 
% direction.

% Although Bumble can "see" everything within a 2-cell radius, he only
% pays attention to objects that are adjacent to his current location.

% Here are the instructions Bumble follows.




% push crosses if hurt

bumble([Strength,Damage,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	interesting(Obj),
	Obj = cross,
	heal(Strength,Damage),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).

% push trees if hungry

bumble([Strength,Damage,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(fruit,[NW,N,NE,W,E,SW,S,SE],Num),
	eat(Strength,Damage),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).

bumble([Strength,Damage,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	interesting(Obj),
	Obj = tree, 
	eat(Strength,Damage),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).



% Collect any nearby desirable object.

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	desirable(Obj),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).


% Try pushing nearby interesting objects if it is a tree
% trees are interesting & should be pushed only if hungry



% Try pushing nearby interesting objects

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	interesting(Obj),
	\+ Obj = tree, 
	\+ Obj = cross,
	\+ Obj = bird,
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).

% If I've got bugspray and birdseed and bird is close drop bugspray and catch that bird.
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	Obj = bird,
	member(birdseed,Inventory),
	member(bugspray,Inventory),
	vdrop(bugspray),
	nl, write('DROPPED THE SPRAY...CATCH THAT BIRD!!!'),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).

% If there is a bird in two squares away, move towards it. 
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	Obj = bird,
	member(birdseed,Inventory),
	nl, write('CATCH THAT BIRD!!!'),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).

% If there's a cross two squares away, move towards it.

bumble([Strength,Damage,_,_,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	interesting(Obj), % not sure if this is needed?
	Obj = cross, 
	heal(Strength,Damage),
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	move_toward_x(GoToward,Dir).

% If there's a tree two squares away, move towards it

bumble([Strength,Damage,_,_,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	interesting(Obj), % not sure if this is needed?
	Obj = tree, 
	eat(Strength,Damage),
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	move_toward_x(GoToward,Dir).



%
%
% Take Path
%
%

% Check if we're already have a path so follow it!
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(DIR)) :-	 
	findall((X,Y),path(X,Y),Path),
	\+ Path = [], % if path is not null
	Path = [(NewX,NewY)|_], % Path is a list of cords
	here(CurrentX,CurrentY), % get the current location 
%	nl, write('CurrentPosition('), write(CurrentX), write(','), write(CurrentY), write(')'), ttyflush,
	retract(path(NewX,NewY)), % pop the first item off the path list
%	nl, write('NextPosition('), write(NewX), write(','), write(NewY), write(')'), ttyflush,
	heading(CurrentX, NewX, X_Mov), % calculate direction on the x axis
	heading(CurrentY, NewY, Y_Mov), % calculate direction on the y axis
%	nl, write('X_Mov is '), write(X_Mov), write(' Y_Mov is '), write(Y_Mov),ttyflush,
	coordDirection(X_Mov, Y_Mov, DIR), % given directions assert compass direction
	nl, write('DIR is '), write(DIR), ttyflush,
	can_remove(Visitable), % is open or visited.
	nl, write('Visitable ' - Visitable), ttyflush,
	member(Visitable,[NW,N,NE,W,E,SW,S,SE],Num),
	member(DIR,[nw,n,ne,w,e,sw,s,se],Num),
	write('Followed Path').
	 % is open ? 


% If following the path has failed try moving into an ajacient cell this will remove the current path
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(DIR)) :-	 
	findall((X,Y),path(X,Y),Path),
	\+ Path = [],
	here(CurrentX,CurrentY),
%	nl, write('CurrentPosition('), write(CurrentX), write(','), write(CurrentY), write(')'), ttyflush,
	retract(path(NewX,NewY)),
%	nl, write('NextPosition('), write(NewX), write(','), write(NewY), write(')'), ttyflush,
	heading(CurrentX, NewX, X_Mov),
	heading(CurrentY, NewY, Y_Mov),
%	nl, write('X_Mov is '), write(X_Mov), write(' Y_Mov is '), write(Y_Mov),ttyflush,
	coordDirection(X_Mov, Y_Mov, GoToward),
%	nl, write('DIR is '), write(GoToward),
	move_toward_x(GoToward,DIR),
	member(Visitable,[NW,N,NE,W,E,SW,S,SE],Num),
	member(DIR,[nw,n,ne,w,e,sw,s,se],Num),
	can_remove(Visitable), % is open or visited.
	retractall(path(_,_)), % remove old path as bumble will no longer be on it. 
	nl, write('Bumble could not move to the supplied space bumble has moved to an ajacent space and earsed path').
%	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
%	member(DIR,[nw,n,ne,w,e,sw,s,se],Num),
	
%on a path but can't follow, then Remove the current path!
bumble(_,_) :-
	findall((X,Y),path(X,Y),Path), % fetch the current path 
	\+ Path = [], % if the current path is not blank
	nl, write('Erasing Path as it cant be followed'), ttyflush,
	retractall(path(_,_)). % retract the current path.
	%TODO: possible feature add new path generation here to ensure same goal? 

%
%
% Search clauses
%
%

% If hungry search for tree
bumble([Strength,Damage,_,_,_,_,_,_,_],sit) :-
	eat(Strength,Damage),
	here(Current_X,Current_Y),
	findall((X,Y),path(X,Y),NPath),
	NPath = [], % if the path null
	nl, write('Hungry, check to see if i have seen a cross in my map'),nl,ttyflush,
	find_path(greedy, tree,(Current_X,Current_Y),Path), % Find path to nearest tree
	remove_first_from_list(Path, FirstRemoved), % Pop the first item as it's the current position
	update_bumble_path_x(FirstRemoved), %Store the new path
	nl, write(' Path: ' - FirstRemoved),nl,ttyflush,
	nl, write('Search Completed').
	%TODO: Possible extension follow path now.

% If hungry and no tree search for fruit
bumble([Strength,Damage,_,_,_,_,_,_,_],sit) :-
	eat(Strength,Damage),
	here(Current_X,Current_Y),
	findall((X,Y),path(X,Y),NPath),
	NPath = [], % if the path null
	nl, write('Hungry, check to see if i have seen a cross in my map'),nl,ttyflush,
	find_path(greedy, fruit,(Current_X,Current_Y),Path), % Find path to nearest tree
	remove_first_from_list(Path, FirstRemoved), % Pop the first item as it's the current position
	update_bumble_path_x(FirstRemoved), %Store the new path
	nl, write(' Path: ' - FirstRemoved),nl,ttyflush,
	nl, write('Search Completed').
	%TODO: Possible extension follow path now.

% If hurt and no current search generate path to nearest cross
bumble([Strength,Damage,_,_,_,_,_,_,_],sit) :-
	heal(Strength,Damage), % if needs to heal 
	here(Current_X,Current_Y), % get current position
	findall((X,Y),path(X,Y),NPath), % Get the current path 
	NPath = [], % if the path null
	nl, write('Hurt, check to see if i have seen a cross in my map'),nl,ttyflush,
	find_path(greedy, cross,(Current_X,Current_Y),Path), % Find path to nearest cross
	remove_first_from_list(Path, FirstRemoved), % remove the first item off the list
	update_bumble_path_x(FirstRemoved), % Store the newly formed path
	nl, write(' Path: ' - FirstRemoved),nl,ttyflush, 
	nl, write('Search Completed').
	%TODO: Possible extension follow path now.


% Try to go through any nearby door if you didn't try to go through
% a door on the last move.
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(tried),
	member(door,[NW,N,NE,W,E,SW,S,SE],Num),
	assert(tried),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).


% Move away from any threatening object if not in possesssion of a shield
% (run from dragon unless equipped with sword)
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE]),
	Obj = dragon,
	\+ member(sword,Inventory),
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir),
	write('FLEE FROM '), write(Obj).

%If Obj is hornet and bumble is holding bugspray, spray the wasp!
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Pos),
	Obj = hornet,
	member(bugspray,Inventory),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Pos).


%If Obj is hornet and bumble is not holding bugspray move away
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(InvDir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Pos),
	threatening(Obj),
	Obj = hornet,
	\+ member(bugspray,Inventory),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Pos),
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir).

%If Obj is hornet and bumble is not holding bugspray move away
bumble([_,_,Inventory,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE]),
	threatening(Obj),
	Obj = hornet,
	\+ member(shield,Inventory),
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir).


%If Obj is snail and bumble is not holding bugspray move away
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Pos),
	threatening(Obj),
	Obj = snail,
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir).

%	move_away_x(Dir,InvDir).

%extended predicates.

bumble([_,_,Inventory,_,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	threatening(Obj),
	Obj = hornet,
	member(bugspray,Inventory),
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	move_toward_x(GoToward,Dir).


	
%
%
% Search
%
%

% NOTE A lot of the code currently contained in this section is GW's


% For greedy search, need to sort the queue best at front = smallest h(n). 
% first append to complete the list & then do a sort. sort/3 takes 
% a list, in this case [cost,[X,Y, X,Y...]] and uses the first element 
% of each path [1] as the sort key. Ascending order too 
insert_nodes(Set1,Set2,Sorted):- 
	search_type(greedy), % if it is greedy, do sort 
	append(Set2,Set1,Set3), 
	sort(Set3,Sorted,[1]). % do something clever! 

% find_path(SearchType,Goal,Start,Path) searches for a list of
% coordinates (a Path) that leads from the agent's current 
% location Start (of the form (X,Y)) to a location where
% an object of the sort specified by Goal is located. Goal
% might be tree or cross, for example. The kind of search
% peformed is determined by SearchType, which can be depth_first
% or breadth_first. To simplify programming, % the Path is built
% backwards and then reversed.
%
% The SearchType and Goal are asserted into clauses where they
% can be used by insert_nodes/3 and solution/1.


% A path satisfies a Goal if the first (eventually, last)
% position in the path is occupied by Goal.
%

solution([(X,Y)|_]) :-
	mygoal(Goal),
	mymap(X,Y,Goal),
	nl,write('Solution Passed:'),write(X),write(Y),nl,ttyflush. % print it - final path 



% generate_new_nodes(Path,Goal,Paths) finds (almost) all
% legal Paths that extend Path by exactly one step in any 
% direction. A legal path is one made up entirely of
% locations that, so far as the agent can tell from the
% map, it can occupy. These are empty locations, locations 
% where there are doors, locations that contain the goal
% object, or locations occupied by some object that the
% agent can remove (listed in clauses for the predicate 
% can_remove/1.)
%
% expand_node/3 actually embodies a heuristic since it does
% not allow circular Paths to be built. Of course, we would
% have to define generate_new_nodes/3 differently for a
% different domain.

generate_new_nodes([C,(X,Y)|Rest],Paths,Goal_X,Goal_Y) :-
	findall([Cost,(XX,YY),(X,Y)|Rest], % given these terms
	(
		Xminus is X - 1, % generate X,Y coordinates
		Xplus is X + 1, % for all the neighbouring tiles
		Yminus is Y - 1, % relative to the current X,Y
		Yplus is Y + 1,
		member(XX,[Xminus,X,Xplus]), % XX becomes bound to values in list
		member(YY,[Yminus,Y,Yplus]), % findall will get all combinations
		mymap(XX,YY,Obj), % get whatever object is at that location
		\+ member((XX,YY),[(X,Y)|Rest]), % have we been here before? (loop detect)
		(
			mygoal(Obj) % it could be the goal (hopefully!)
			; % or
			member(Obj,[o,v,door]) % it could be a door or open or visited.
			; % or
			can_remove(Obj) % it can be an object he can remove
		), get_cost(XX,YY,Goal_X,Goal_Y,Cost) % h(n)calculation
	),
	Paths). % this is the list of possible locations



%High Level Search Function
find_path(SearchType,Goal,Start,Path) :- 
	nl,write('Find Path Called= ' - Goal),nl,ttyflush, % print it - final path 
	retractall(search_type(_)), % house keeping 
	assert(search_type(SearchType)), 
	retractall(mygoal(_)), 
	assert(mygoal(Goal)), % assert the given goal 
	findall((X,Y,Goal), 
		mymap(X,Y,Goal), 
		Goals), 
	Goals \= [],
	get_closest(Goals, X_Goal,Y_Goal), 
	search([[Cost,Start]],ReversedPath,X_Goal,Y_Goal,[],[],100), 
	reverse(ReversedPath,Path). % reverse it - start-to-goal 

% does the first node satisyfy the solution/goal
search([[_|Path]|_],Path,Goal_X,Goal_Y,CLOSED,OPEN,Iterations) :- % first node 
	solution(Path). % goal tile? 
	

% DIRTY HACK: this has been implemented to stop recusion overflows crashing the application. 
% this is a far from ideal solution however it has increased the success of the program overal
search([[_|_]|_],_,_,_,_,_,Iterations) :-
	nl, write('Search Dumped to prevent overflow'),nl, 
	Iterations = 0.
	
%Main seach method
search([FirstNode|RestOfNodes],Solution,Goal_X,Goal_Y,CLOSED,OPEN,Iterations) :- % from the current tile 
	% nl, write(' Iterations Remaining: ' - Iterations),nl,ttyflush, 
	Iterout is Iterations-1, % See note above
	generate_new_nodes(FirstNode,NewNodes,Goal_X,Goal_Y), % generate next poss tiles 
	insert_nodes(NewNodes,RestOfNodes,NextSetOfNodes), % add to OPEN 
	!, 
	add_to_CLOSED(NextSetOfNodes,CLOSED,New_CLOSED), % put the next node (best) on CLOSED 
	check_CLOSED(NextSetOfNodes,New_CLOSED,NextSetOfNodes_2), % better path on CLOSED? 
	search(NextSetOfNodes_2,Solution,Goal_X,Goal_Y,New_CLOSED,NextSetOfNodes_2,Iterout). % recurse with new list 

%Predicate to check the items in the closed list. 
check_CLOSED([First|Rest],[D|CLOSED],NextSetOfNodes_2):- % strip off the first (best?) 
	CLOSED = [] -> NextSetOfNodes_2 = [First|Rest]; % empty? Do nothing 
	(First=[A,B|Closed], % gets the cost & head of First 
	findall(Best_path, 
	( 
	member([C1,B|Closed],CLOSED,Pos), % is the node (B) in CLOSED? 
	mem(CLOSED,[Pos],Best_path) % gets the path at Pos 
	), 
	Paths)), 
	sort(Paths, Sorted_paths,[1]), % sort them on Cost 
	Sorted_paths = [Best|_], % retrieve the best path 
	Best = [C|_], % retrieve the cost of best 
	C<A -> % is the cost smaller on CLOSED? 
	append([Best],Rest,NextSetOfNodes_2); % append as a list.. [First] 
	NextSetOfNodes_2 = [First|Rest]. % else send original list back 


%Alternate check close not currently being used.
check_CLOSED2([First|Rest],[New_addition|CLOSED],NextSetOfNodes_2):- % strip off the first (best?) 
	CLOSED = [] -> NextSetOfNodes_2 = [First|Rest] ; % empty list? do nothing 
	(First=[A,B,C,D|Closed], % gets the cost & head of First 
	findall(Best_path, 
	( 
	member([_,_,_,D|Closed],CLOSED,Pos), % is the node (B) in CLOSED? 
	mem(CLOSED,[Pos],Best_path) % gets the path at Pos 
	), 
	Paths)), 
	sort(Paths, Sorted_paths,[1]), % sort them on Cost 
	Sorted_paths = [Best|_], % retrieve the best path 
	Best = [Fn,_,_|_], % retrieve the cost of best 
	Fn<A -> % is the cost smaller on CLOSED? 
	append([Best],Rest,NextSetOfNodes_2); % append as a list.. [First] 
	NextSetOfNodes_2 = [First|Rest]. 
	add_to_CLOSED([First|Rest],CLOSED,New_CLOSED):- % strip off the first 
	append([First],CLOSED,New_CLOSED). % append as a list.. 


add_to_CLOSED([First|Rest],CLOSED,New_CLOSED):- % strip off the first 
	append([First],CLOSED,New_CLOSED). % append as a list.. [First] 



% generate_new_nodes(Path,Goal,Paths) finds (almost) all
% legal Paths that extend Path by exactly one step in any 
% direction. A legal path is one made up entirely of
% locations that, so far as the agent can tell from the
% map, it can occupy. These are empty locations, locations 
% where there are doors, locations that contain the goal
% object, or locations occupied by some object that the
% agent can remove (listed in clauses for the predicate 
% can_remove/1.)
%
% expand_node/3 actually embodies a heuristic since it does
% not allow circular Paths to be built. Of course, we would
% have to define generate_new_nodes/3 differently for a
% different domain.
generate_new_nodes([C,(X,Y)|Rest],Paths,Goal_X,Goal_Y) :- 
	findall([Cost,(XX,YY),(X,Y)|Rest], % given these terms 
	( 
	Xminus is X - 1, % generate X,Y coordinates 
	Xplus is X + 1, % for all the neighbouring tiles 
	Yminus is Y - 1, % relative to the current X,Y 
	Yplus is Y + 1, 
	member(XX,[Xminus,X,Xplus]), % XX becomes bound to values in list 
	member(YY,[Yminus,Y,Yplus]), % findall will get all combinations 
	mymap(XX,YY,Obj), % get whatever object is at that location 
	\+ member((XX,YY),[(X,Y)|Rest]), % have we been here before? (loop detect) 
	( 
		mygoal(Obj) % it could be the goal (hopefully!) 
		; % or 
		member(Obj,[o,door]) % it could be a door 
		; % or 
		can_remove(Obj) % it can be an object he can remove 
		),
	get_cost(XX,YY,Goal_X,Goal_Y,Cost) % h(n)calculation 
	), 
	Paths). % this is the list of possible locations 


%Calculate the cost 
get_cost(XX,YY,X,Y,Cost):- 
	S1 is sign(XX), % sign returns -1, 0 or 1 
	S2 is sign(X), % depending on sign of the term 
	S3 is sign(YY), 
	S4 is sign(Y), 
	(((S1=:= -1, S2=:= -1); % if XX & X are both negative 
		(S1=:= 1, S2=:= 1); % or are both positive 
		S1=:= 0 ; % or one of them is zero 
		S2=:= 0) -> 
	X_diff is abs(XX-X); % then just subtract (& lllllllllllabs) 
	((S1=:= 1, S2=:= -1); % if XX = pos & X = neg 
		(S1=:= -1, S2=:= 1)) -> % or XX = neg & X = pos 
		(XX_abs is abs(XX), % then get the absolute value 
		X_abs is abs(X), % same for X 
		X_diff is abs(XX_abs + X_abs)); true), % add them in this case 
	(((S3=:= -1, S4=:= -1); % same thing for YY & Y 
		(S3=:= 1, S4=:= 1); 
		S3=:= 0; 
		S4=:= 0) -> 
		Y_diff is abs(YY-Y); 
	((S3=:= 1, S4=:= -1); 
		(S3=:= -1, S4=:= 1)) -> 
		(YY_abs is abs(YY), 
		Y_abs is abs(Y), 
		Y_diff is abs(YY_abs + Y_abs)); true), 
		Cost is max(X_diff,Y_diff). % simply take the max 


% find the closest goal node
get_closest([(X,Y,Goal)|Restof], X_Goal,Y_Goal):- 
	X_Goal = X, 
	Y_Goal = Y. 

%Recursive iterator that adds items in supplied list to the path
update_bumble_path_x([_|List]):-
	List = [], % if list is empty
	true.

%If the list doesn't already contain a cell for the following item add it
update_bumble_path_x([(X,Y)|_]):-
	\+ path(X,Y), %if path doesn't contain X Y is this really needed..
	retractall(path(X,Y)), %remove all X Y 
	assert(path(X,Y)), % add X Y to path
	nl, write('Adding '), write(X),write(Y), write(' to path'),
	fail.

%Recurse
update_bumble_path_x([_|RestOfList]):- 
	update_bumble_path_x(RestOfList). %Recuse through list


%Pop the first item on the given list retunin the tail
remove_first_from_list([_|Tail], Tail):- 
	true.


% If there's something desirable two squares away, move towards it
bumble([_,_,_,Last,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	desirable(Obj), % not sure if this is needed?
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	write(Last),
	\+ Dir = same, ! ,
	move_toward_x(GoToward,Dir),
	nl, write('Something desirable!! move towards it!! '), write(Dir).

%Calculate the 
%If current is less than next direction is posive on axis
heading(Current, Next, Val) :-
	Current < Next, 
	Val is 1.

%If current is greater than next direction is negative on axis
heading(Current, Next, Val) :-
	Current > Next, 
	Val is -1.

%If equal there is no movement
heading(Current, Next, Val) :-
	Current = Next, 
	Val is 0.


% If there's something interesting two squares away, move towards it

bumble([_,_,_,_,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	interesting(Obj), % not sure if this is needed?
	\+ Obj = tree,
	\+ Obj = cross,
	\+ Obj = fruit,
	\+ Obj = bird,
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	move_toward_x(GoToward,Dir),
	nl, write('Something interesting!! move towards it!!').

% If there's something desirable two squares away, move towards it
bumble([_,_,_,Last,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],[WW,_,_,_,EE],[WSW,_,_,_,ESE],[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
	member(Obj,[NWNW,NNW,NN,NNE,NENE,SWSW,SSW,SS,SSE,SESE,WNW,ENE,WW,EE,WSW,ESE],Num),
	desirable(Obj), % not sure if this is needed?
	member(GoToward,[nwnw,nnw,nn,nne,nene,swsw,ssw,ss,sse,sese,wnw,ww,wsw,ene,ee,ese],Num),
	write(Last),
	\+ Dir = same, ! ,
	move_toward_x(GoToward,Dir),
	nl, write('Something desirable!! move towards it!! '), write(Dir).


% Exploration
%check all ajacent cells have been visited before adding 
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	exploration, %is bubmle exploring
	member(o,[E,NE,N,NW,W,SW,S,SE],Pos),
	check_visited(Pos),
	nl, write('Exploring...open space at: '), write(Pos), write(' '),
	write([E,NE,N,NW,W,SW,S,SE]),
	member(Dir,[e,ne,n,nw,w,sw,s,se],Pos).

%TODO: add exploration to outer circle 


% About 87% of the time, move in the direction you went
% last if it is clear.
bumble([_,_,_,LastLocation,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	nl, write('Not exploring'),
	random_direction(X),
	member(X,[nw,n,ne,w,e,sw,s,se],Test),
	Test > 1,
	member(LastLocation,[se,s,sw,e,w,ne,n,nw],Num),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	member(o,[NW,N,NE,W,E,SW,S,SE],Num).

% Move at random to empty space.
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(o,[NW,N,NE,W,E,SW,S,SE]),
	repeat,
	random_direction(Dir),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num2),
	member(o,[NW,N,NE,W,E,SW,S,SE],Num2).

% Move to a space to pick up fruit even if not needed 
% this prevents apple locking 
bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(fruit,[NW,N,NE,W,E,SW,S,SE]),
	repeat,
	random_direction(Dir),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num2),
	member(fruit,[NW,N,NE,W,E,SW,S,SE],Num2).

% When all else fails, sit out a move.
bumble(_,sit).


%
% Exploration
%

check_visited(Pos):-
	member((XX,YY),[(1,0),(1,-1),(0,-1),(-1,-1),(-1,0),(-1,1),(0,1),(1,1)],Pos),
	here(X,Y),
	TempX is X+XX,
	TempY is Y+YY,
	\+ visited(TempX,TempY),
	nl, write('Not visited: ('), write(TempX), write(','), write(TempY), write(')').

%
%
%
% Map generation
%
%
%


%Build bumble map first run.
build_bumble_map(Perceptions):-
	\+ here(_,_), !, % first time, no map
	assert(here(0,0)), % always starts at (0,0)
	assert(visited(0,0)), % must be open space
	update_bumble_map(0,0,Perceptions).


%add the current location to the visited map. 
build_bumble_map(_):-
	here(X,Y),
	nl, write('moved from here('), write(X), write(','), write(Y), write(')'),
	assert(visited(X,Y)),
	fail.

% no move - cut search - nothing
build_bumble_map([_,_,_,Dir,_,_,_,_,_]):-
	Dir = same, ! . 

%Update bumbles map. 
build_bumble_map([_,_,_,Dir,V1,V2,V3,V4,V5]):-
	\+ tried, !, % bumble did not go through a door last time
	here(X,Y),
	member(Dir,[nw,n,ne,e,se,s,sw,w],Pos),
	member((XX,YY),[(1,1),(0,1),(-1,1),(-1,0),(-1,-1),(0,-1),(1,-1),(1,0)],Pos),
	NewX is X+XX,
	NewY is Y+YY,
	retractall(here(_,_)),
	assert(here(NewX,NewY)),
	write(' -> New here('), write(NewX), write(','), write(NewY), write(')'),
	update_bumble_map(NewX,NewY,[_,_,_,Dir,V1,V2,V3,V4,V5]).


%If the last visited cell was a door, the apply padding to the current map.
build_bumble_map([_,_,_,Dir,V1,[WNW,NW,N,NE,ENE],[WW,W,HERE,E,EE],[WSW,SW,S,SE,ESE],V5]):-
	here(X,Y),
	nl, write('Went through a door from('), write(X), write(','), write(Y), write(')'),
	member(door,[NW,N,NE,W,E,SW,S,SE],Pos1),
	member((XPadding,YPadding),[(0,0),(0,1),(0,0),(1,0),(-1,0),(0,0),(0,-1),(0,0)],Pos1),
	write(' - padding('), write(XPadding), write(','), write(YPadding), write(')'),
	member(Dir,[nw,n,ne,e,se,s,sw,w],Pos),
	member((XX,YY),[(1,1),(0,1),(-1,1),(-1,0),(-1,-1),(0,-1),(1,-1),(1,0)],Pos),
	NewX is X+XX+XPadding,
	NewY is Y+YY+YPadding,
	retractall(here(_,_)),
	assert(here(NewX,NewY)),
	write(' -> New here('), write(NewX), write(','), write(NewY), write(')'),
	update_bumble_map(NewX,NewY,[_,_,_,Dir,V1,[WNW,NW,N,NE,ENE],[WW,W,HERE,E,EE],[WSW,SW,S,SE,ESE],V5]).



%Top level update map method. 
update_bumble_map(BX,BY,[_,_,_,_,
		[NWNW,NNW,NN,NNE,NENE],		% V1
		[WNW,NW,N,NE,ENE],		% V2
		[WW,W,_,E,EE],			% V3
		[WSW,SW,S,SE,ESE],		% V4
		[SWSW,SSW,SS,SSE,SESE]]):-	% V5
	here(BX,BY),
	findall((X,Y,Obj),
	(member(Obj,[NWNW,NNW,NN,NNE,NENE,
		WNW,NW,N,NE,ENE,WW,W,E,EE,
		WSW,SW,S,SE,ESE,SWSW,SSW,SS,SSE,SESE],Pos),
	member((XX,YY),[(-2,-2),(-1,-2),(0,-2),
		(1,-2),(2,-2),(-2,-1),(-1,-1),
		(0,-1),(1,-1),(2,-1),(-2,0),
		(-1,0),(1,0),(2,0),(-2,1),(-1,1),
		(0,1),(1,1),(2,1),(-2,2),(-1,2),
		(0,2),(1,2),(2,2)],Pos),
	X is BX+XX,
	Y is BY+YY ),
	List),
	update_bumble_map_x(List).

% if the tail of the list is empty return true. 
update_bumble_map_x([_|List]):-
	List = [],
	true.

%Add items to map that arn't on map and that can't see, hornet, snail and bird. 
update_bumble_map_x([(X,Y,Obj)|_]):-
	\+ Obj = cant_see,
	\+ Obj = hornet,
	\+ Obj = snail,
	\+ Obj = bird,
	\+ mymap(X,Y,Obj),
	retractall(mymap(X,Y,_)),
	assert(mymap(X,Y,Obj)),
	nl, write('Adding '), write(Obj), write(' to ('), write(X), write(','), write(Y), write(')'),
	fail.

%Recuse through the rest of the list
update_bumble_map_x([_|RestOfList]):-  
	update_bumble_map_x(RestOfList).

%
% Fuzzy-style reasoning 
%

eat(_,_):-
	hungry_status(starving),
	nl, write('Bumble REALLY needs to eat!').

eat(_,_):-
	\+ hurt_status(critically_hurt),
	hungry_status(very_hungry),
	nl, write('Bumble needs to eat!').

eat(_,_):-
	hungry_status(medium_hungry),
	\+ hurt_status(medium_hurt),
	\+ hurt_status(small_hurt),
	nl, write('Bumble needs to eat a bit!').

heal(_,_):-
	hurt_status(very_hurt),
	nl, write('Bumble REALLY needs to heal!').

heal(_,_):-
	hurt_status(medium_hurt),
	\+ hungry_status(starving),
	nl, write('Bumble needs to heal!').

heal(_,_):-
	hurt_status(small_hurt),
	\+ hungry_status(starving),
	nl, write('Bumble needs to heal a bit!').


/* 
 * Table of directions 
 */

% top left corner
move_toward_x(nwnw,nw).
move_toward_x(nwnw,n).
move_toward_x(nwnw,w).
	
% top right corner
move_toward_x(nene,ne). 
move_toward_x(nene,n).
move_toward_x(nene,e).
	
% bottom left corner
move_toward_x(swsw,sw). 	
move_toward_x(swsw,s).
move_toward_x(swsw,w).
	
% botton right corner
move_toward_x(sese,se). 
move_toward_x(sese,s).
move_toward_x(sese,e).

% a - top left of centre
move_toward_x(nnw,w).
move_toward_x(nnw,nw).
	
% b - top centre
move_toward_x(nn,n).
move_toward_x(nn,nw).
move_toward_x(nn,ne).

% c - top right of centre
move_toward_x(nne,n).
move_toward_x(nne,ne).

% d - bottom left of centre
move_toward_x(ssw,s).
move_toward_x(ssw,sw).
	
% e - bottom centre
move_toward_x(ss,s).
move_toward_x(ss,sw).
move_toward_x(ss,se).
	
% f - bottom right of centre
move_toward_x(sse,s).
move_toward_x(sse,se).
	
% g - left up from centre
move_toward_x(wnw,w).
move_toward_x(wnw,nw).
	
% h - left centre
move_toward_x(ww,w).
move_toward_x(ww,nw).
move_toward_x(ww,sw).
	
% i - left below centre
move_toward_x(wsw,w).
move_toward_x(wsw,sw).

% j - right up from centre
move_toward_x(ene,e).
move_toward_x(ene,ne).
	
% k - right centre
move_toward_x(ee,e).
move_toward_x(ee,ne).
move_toward_x(ene,se).
	
% l - right below centre
move_toward_x(ese,e).
move_toward_x(ese,se).


% Used to run away from danger
move_away_x(nw,se).
move_away_x(n,s).
move_away_x(ne,sw).
move_away_x(w,e).
move_away_x(e,w).
move_away_x(sw,ne).
move_away_x(s,n).
move_away_x(se,nw).
	
%Used to move to an ajacent cell for collision avoidance
% North
ajacent(n, nw).
ajacent(n, ne).
% North West
ajacent(nw, n).
ajacent(nw, w).
% West
ajacent(w, nw).
ajacent(w, sw).
% South West
ajacent(sw, w).
ajacent(sw, s).
% South
ajacent(s, sw).
ajacent(s, se).
% South East
ajacent(se, s).
ajacent(se, e).
% East
ajacent(e, se).
ajacent(e, ne).
% North East
ajacent(ne, e).
ajacent(ne, n).

%%%%%%%%%%%%%% end of table of directions %%%%


%
% Cartisean Coord to DIR %%%
%     CoordDirection(X,Y,DIR)
% Example: coordDirection(CurrentX - CurrentY, NextX - NextY, DIR).
%

%NB: I have removed spaces two steps away as bubmble can only move one set at a time

coordDirection(-1,-1,nw).
coordDirection(0,-1,n).
coordDirection(1,-1,ne).
coordDirection(-1,0,w).
coordDirection(1,0,e).
coordDirection(-1,1,sw).
coordDirection(0,1,s).	
coordDirection(1,1,se).

% Trees, red croses, and birds are interesting.

interesting(tree).
interesting(cross).
interesting(bird).

% Hornets, snails, and thorns are threatening.

threatening(hornet).
threatening(snail).
threatening(thorn).
threatening(dragon).
threatening(troll).
threatening(witch).

% Visitiable

can_visit(o).
can_visit(v).

% These are the objects that the agent can remove
% from a location in test7.vw.
can_remove(fruit).
can_remove(gkey).
can_remove(ykey).
can_remove(bugspray).
can_remove(o).
can_remove(v).


% Desireable Items
desirable(bkey).
desirable(blukey).
desirable(ykey).
desirable(gkey).
desirable(pkey).
desirable(birdseed).
desirable(bugspray).
desirable(sword).
desirable(shield).



%Congrats for reading this far, heres a little treat
%?????????????????+?++???++++++++++++++++++++++++++++++++++++++++++++++?++++?????
%???????????????++???++???+++++?++?+++?+++??+?+++++?++++++++++++++??+?++??????+??
%?????????????????++++++?+??++?II$O$O$Z7O$ZI??+????+?I7777$7$$$$$$77??+++++???+??
%????????????????????????++??Z$OOZ$88OZ7O8D888Z7I$$$$$$$$$I7$$$$$$$$??++++???????
%??????????????????++????++7$ZZZO$ZZZOOZZDDD8NOD8II?77$$$$$$$$$$?$$Z????+++???+??
%?????????????????+???++?77O8OOIZ7$77I$7ZO8DDDDDD88$I?I$$?$$$$$$$$$$?????????+???
%????????????????????+??ZOO?77?IIIII77$7$7ZO8NNDD8D8Z$$I7$I$II$$7$$Z??????+?????+
%????????????????????IOO877?I??+++++++??I7ZZ$$ODNDNZ7$Z$$$7I$I77I$$Z????++++??+??
%??????????????????+?O8$??????+++++++++++???II7$7OOOZ$Z$$$$$$77I7$IZ???++++??????
%????????????????+++7$I+??????++=====++++++???II7$$$OII$O$$$$$$7I?$$?????+??+?+?+
%?????????????????+?7ZII?I?+?++++=+==+===+++????I7$$7?=O$$$$$$$$$?$7????+?+??????
%??????????????????Z$7II??+++++++++++++++++++++??77$II+78Z$$$$$7$$IZ????+++??????
%?????????????????7IIIII??+++++?+++++++??+++++???I77??IIZ8$$$$$$$$$Z???++++?+????
%?????????????????$=+II??+?++++++++++++==++++++??II7I++7IDZ$$$$$$$$Z???++????????
%????????????????+$??I??+++++========~~~==+++??II7I77I?+IOOZZZZZ$ZZ8??????+?????+
%???????????????+?$??II?++++=+=~~~~:~~~==??7??=??II77I??Z$8D88DD8888????????????+
%?????????????????$?I7I?++??+?+?=~=~~~=+?7I+++?+??III77$DOND8888888D??????+??????
%?????????????????7Z?7I+??=I77I??++==++++=I++?ZZZO7$I7$77ZID8888888D???++?+?+++++
%??????????????????I77II?++~+=~=++?==+?$7I7Z$O$ZII??II$$Z7+88888888D????+??++++??
%??????????????????Z77I7II?OOZIII8$???7?+?I?++I?II?=IIIZ7I=D88888888?????+++++++?
%?????????????????+$?$II7Z7$II?I?I++++?$+++++?==+??+?I7Z7=+DD888888D???+?++++++++
%???????????????????I7???I+=+?++???++???+?++++=++=++?I77++8DDO888888?+?+?++++++++
%?????????+?????????II+?+??+++????++=+??+====+=++++?I7$IIIDD8OO8OOO8????+++++++++
%?????????????????+?I+??+?=+===~??++=+?I?+==~~~==+??I$$II7D8OOOOZOOO??++++??+++++
%??????????????????+?III?++===+??+=~~~+I??+??+==++?II$Z7?78O$$$$$Z$Z???++++++++++
%?????????????????+??I7I?++++?+??I?+++I?I+++==?+++??I$Z??D8O$$$$$ZZZ??+++++++++++
%?????????????????+??III??++?+++?+????+++++++==+=+??I7$OOOZ$77III7Z7+?+++++++++++
%???????????+????+??+I??+?+++++??++======????+=+=+??I7$$$7?+++++++++??+++++++++++
%???????????????????+?I?+?++++7$$I??++?7?=+7??+==+?+I$Z7?+++++++++++??+++++++++++
%???????????????????+?I?+++=+??$I7==~+=7III?+++=+++?7$$7?++++++++++++++++++++++++
%???????+?????+????+++?7??+==+???+++=~===++++++++???Z$OZ$777777777????+++++++++++
%?????????????+?????+???I+?+++???+==+====++++++????$$$$7????I?III777?++++++++++++
%??????????????+???++?+?7I??+++??++++?++?++++++?II$7$8O$777777777777?++++++++++++
%??????????????+??+?+???I7???+??????+===+?+++?III$77$OZ7I??I777$7777??+++++++++++
%?????????????????+++?+??7I7II??+?++==~==?+++I$777I7$+I7777$7777777I??+++++++?+++
%????????????????+????++++=II$7I?+++++=+++II$777III77==?+??????????????++++++?+++
%?????????????????++????+=I=I?7$7I7????II$$77IIII??I7+~~=IIIIIIIIIII???++++++?+==
%??????????????????++++7++:==I?II$7IIIII7777II?I???I$?~:~+OO????III7???+++++?++==
%??????????+???????ZDOO==~?=~=I+III?+===?I??++?????II=~=:=?$88888??????+++?++++=+
%????????????+?$O88D8O~+=+~~:~+????I++~==++??++???II+=+~:::=?8DDDDD8D8$?+I?++++==
%??????+???888DDDD8DD==~==~+=::????+???++++++??++??I=:~,~=~~=+D8DDDDDDDDDDD8D87++
%???????O8DDDDDDDD88~?=~=~~==,~+?++=+??I??++++++?+?I==~?:$8NI=?DDDDDDDDDDDDDDNDD8
%???I88DDDD888DD8D8~~:=~:==~=:+,:,++=======+++++??+=,:.,NDD8DD7~NDDDDDDDDDDDDDDDD
%$8DDDDDDD88DD888D~===:==?8~,~~~:~~~==++++++===+?++=?.ND8DDD8D8?:DDDDDDDDDDDDDDDD
%D8DDDDD88DD888DD=~=~==,O8OZ:+~:++?=::=+=======+?+:.$88888DDDD88+8DDDDDDDDD8DDDDD
%DDDD8DD88D8DDD8$~==D8D88888Z::,,:,=,~==++++===++=?~~88888DDD8D8O88DDDD8DDDD8DDD8
%DDDDDDDDDDDDD8~:88ODD8888D88O::::~,=.:~?=+===++=~::O8888888DDD8D~8DDD888DDDD8DDD
%8DDDDDD8888DD88D8888DDD8D8888O:~:~,::,,:+++==?=:~:=O8888DDD8DDDD8D88D888DDD88DDD
%88D8DDDDDD8DDD88D888D888D888888:=,~:=~:~~==+?++=:,O8888D88DDDNDDDDD88DDD8D8D88DD
%D888D88DDD888D8DD8888D88DD8888DO=+:+:=:.::+~,,+,:8888888888888D8DDDDDDDD88DD888D
%8DDD8D88D8D88DD8888888D8D888D88DOO:,:,,,::~+~.,,=8888888D888DDD88888D8888888DDDD
%88888DD8888DD8888D888D88D8DDO8888OO,:,,+:=:,.:,,D8888D88DD88D888DDD888888888D888
%88DDD8888888D8DD88888888O8888DD88Z8O7.:=~,:=,::OODDO88D8888D8O88888D8D88888D8888
%8888888DDD8D8D8888D88D8888888888O8OO8O:+:.:.,,8DD8O8D888D88D88D88888888888D88888
%8888888888D8888888D88888888888O8O88888Z8=.:.:O888O88D888D88888O888O8888888888888
%88D8888DD88D8D88D8OD8888888888888O8O8888O8IOOO888D88D888888OD88D888888O888888888
