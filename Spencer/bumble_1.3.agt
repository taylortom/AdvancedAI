% Bumble version 1.1: a possible agent file for Workshop 2
%
% Original author: Donald Nute
% Modifications for workshops: Graham Winstanley
%
% Date created:  02/02/1998
% Last modified (Nute): 12/06/2005
% Last modified (GW): January, 2010

:- dynamic [agent/2,tried/0,pushed/0,hungry/0,hurt/0].

% agent(+Perceptions, -Action) receives set of Perceptions from the
% V-World simulator and returns an Action. Perceptions is a list of 
% the form
%
% [Strength,Damage,Inventory,Last,
%	[NWNW, NNW , NN  , NNE , NENE],
%	[WNW , NW  , N   , NE  , ENE ]
%	[WW  , W   , HERE, E   , EE  ],
%	[WSW , SW  , S   , SE  , ESE ],
%	[SWSW, SSW , SS  , SSE , SESE]]
% 
% where the last five items in the list lists comprising the contents
% of the 5 x 5 grid centered on the agent's current location (HERE).
% Inventory is also a list of the items the agent is currently holding.
% Last points in the direction of the location the agent last occupied.
% For example, if the agent tried successfully to move north at its
% last turn, then Last = s; but if the agent tried to move north and
% its movement was blocked, then Last = same.
%
% An agent cannot see through an opaque object. If its view of a cell
% is hidden by an object, the corresponding variable in its visual field
% has the value cant_see.

agent(Perceptions,Action) :-
	set_bumble_states(Perceptions),
	bumble(Perceptions,Action).

set_bumble_states([Strength,Damage|_]):-
	is_bumble_hungry(Strength),
	is_bumble_hurt(Damage).

is_bumble_hungry(Strength):-
	Strength < 1000,		% if Strength is less than 1000
	assert(hungry).		% then bumble is hungry
%message_box(ok, 'now hungry', OO).

is_bumble_hungry(Strength):-
	Strength > 3000,		% if Strength is more than 3000
	retractall(hungry).	% then bumble is not hungry
%message_box(ok, 'now not hungry', O2).

is_bumble_hungry(Strength).	% otherwise no change - could be hungry
					% or not in this range 1001-2999

is_bumble_hurt(Damage):-
	Damage > 50,		% if Damage is more than 50
	assert(hurt).		% then bumble is hurt
%message_box(ok, 'now hurt', O3).

is_bumble_hurt(Damage):-
	Damage = 0,		% if Damage goes down to 0
	retractall(hurt).		% then bumble is not hurt
%message_box(ok, 'now not hurt', O4).

is_bumble_hurt(Damage).		% otherwise no change 1-49
	

% Bumble generally goes through doors when he sees them, eats whatever
% he sees that can be eaten, picks up anything he can, pushes on everything
% he sees except walls and animate objects, runs away from animate objects,
% and otherwise tends to move in straight lines with random changes of 
% direction.

% Although Bumble can "see" everything within a 2-cell radius, he only
% pays attention to objects that are adjacent to his current location.

% Here are the instructions Bumble follows.

% Try to go through any nearby door if you didn't try to go through
% a door on the last move.

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	\+ retract(tried),
	member(door,[NW,N,NE,W,E,SW,S,SE],Num),
	assert(tried),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).

% Move away from any threatening object (other than hornets) if posible

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE]),
	threatening(Obj),
	\+ Obj = hornet,	% not hornets
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir).

% Move away from hornets if hurt

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE]),
	threatening(Obj),
	Obj = hornet,	% applies only to hornets
	hurt,			% and Bumble is hurt
	away_from(Obj,[NW,N,NE,W,E,SW,S,SE],Dir).

% Consume any nearby fruit.

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(fruit,[NW,N,NE,W,E,SW,S,SE],Num),
	hungry,			% only consume fruit if hungry
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).

% Collect any nearby desirable object.

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	desirable(Obj),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num).

% Keys, bird seed, and bug spray are desirable.

desirable(bkey).
desirable(blukey).
desirable(ykey).
desirable(gkey).
desirable(pkey).
desirable(birdseed).
desirable(bugspray).

% Try pushing nearby interesting objects
% (but not trees or crosses - see below)
% pushing trees is associated with being hungry
% pushing crosses only when hurt

bumble([_,_,_,_,_,[_,NW,N,NE,_],[ _,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	interesting(Obj),
	\+ (Obj = tree; Obj = cross),	
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).

% Try pushing nearby interesting objects if it is a tree
% trees are interesting & should be pushed only if hungry

%bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
% but if a tree is 2 tiles away, move towards it
bumble([_,_,_,_,[NWNW,NNW,NN,NNE,NENE],[WNW,_,_,_,ENE],
		[WW,_,_,_,EE],[WSW,_,_,_,ESE],
		[SWSW,SSW,SS,SSE,SESE]],move(Dir)) :-
% \+ retract(pushed),
	member(Obj,[NWNW,NNW,NN,NNE,NENE,
		SWSW,SSW,SS,SSE,SESE,
		WNW,WW,WSW,ENE,EE,ESE],Num),
	interesting(Obj),
	Obj = tree,
	hungry, % but only if hungry
	member(GoToward,[nwnw,nnw,nn,nne,nene,
		swsw,ssw,ss,sse,sese,
		wnw,ww,wsw,ene,ee,ese],Num),
	move_toward_x(GoToward,Dir).
% may need some test here for if it is possible to occupy
% this cell (does it have a nasty thing there?)

% Try pushing nearby interesting objects if it is a red cross
% red crosses are interesting & should be pushed only if hurt

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	
	\+ retract(pushed),
	member(Obj,[NW,N,NE,W,E,SW,S,SE],Num),
	interesting(Obj),
	Obj = cross,	
	hurt,		% but only if hurt
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	assert(pushed).
% Trees, red croses, and birds are interesting.

interesting(tree).
interesting(cross).
interesting(bird).

% Hornets, snails, and thorns are threatening.

threatening(hornet).
threatening(snail).
threatening(thorn).

% About 87% of the time, move in the direction you went
% last if it is clear.

bumble([_,_,_,LastLocation,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	random_direction(X),
	member(X,[nw,n,ne,w,e,sw,s,se],Test),
	Test > 1,
	member(LastLocation,[se,s,sw,e,w,ne,n,nw],Num),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num),
	member(o,[NW,N,NE,W,E,SW,S,SE],Num).

% Move at random to empty space.

bumble([_,_,_,_,_,[_,NW,N,NE,_],[_,W,_,E,_],[_,SW,S,SE,_],_],move(Dir)) :-
	member(o,[NW,N,NE,W,E,SW,S,SE]),
	repeat,
	random_direction(Dir),
	member(Dir,[nw,n,ne,w,e,sw,s,se],Num2),
	member(o,[NW,N,NE,W,E,SW,S,SE],Num2).

% When all else fails, sit out a move.

bumble(_,sit).


/* Table of directions as specified in Nute's V-World
... Our Workshop 3
*/
move_toward_x(nwnw,nw). % top left corner
move_toward_x(nwnw,n).
move_toward_x(nwnw,w).
%
move_toward_x(nene,ne). % top right corner
move_toward_x(nene,n).
move_toward_x(nene,e).
%
move_toward_x(swsw,sw). % bottom left corner
move_toward_x(swsw,s).
move_toward_x(swsw,w).
%
move_toward_x(sese,se). % botton right corner
move_toward_x(sese,s).
move_toward_x(sese,e).
% a - top left of centre
move_toward_x(nnw,w).
move_toward_x(nnw,nw).
% b - top centre
move_toward_x(nn,n).
move_toward_x(nn,nw).
move_toward_x(nn,ne).
% c - top right of centre
move_toward_x(nne,n).
move_toward_x(nne,ne).
% d - bottom left of centre
move_toward_x(ssw,s).
move_toward_x(ssw,sw).
% e - bottom centre
move_toward_x(ss,s).
move_toward_x(ss,sw).
move_toward_x(ss,se).
% f - bottom right of centre
move_toward_x(sse,s).
move_toward_x(sse,se).
% g - left up from centre
move_toward_x(wnw,w).
move_toward_x(wnw,nw).
% h - left centre
move_toward_x(ww,w).
move_toward_x(ww,nw).
move_toward_x(ww,sw).
% i - left below centre
move_toward_x(wsw,w).
move_toward_x(wsw,sw).
% j - right up from centre
move_toward_x(ene,e).
move_toward_x(ene,ne).
% k - right centre
move_toward_x(ee,e).
move_toward_x(ee,ne).
move_toward_x(ene,se).
% l - right below centre
move_toward_x(ese,e).
move_toward_x(ese,se).
%%%%%%%%%%%%%% end of table of directions %%%%
